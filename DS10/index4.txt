!X.S[3]), 737 
", 517 534 539 648 649 726 727 933 934 986 987 
"(a), 791 
"(a)", 858 
"(b), 803 
"(b)", 876 
"2", 867 
"3", 849 861 
"4", 869 
"6", 851 863 
"7", 871 
"9", 853 865 
"@...@";, 296 
"@ArraySize, 308 
"@H1@", 787 799 854 872 
"@H2@", 788 800 855 873 
"@H3@", 789 801 856 874 
"A, 151 
"Applications", 476 
"Efficiency, 129 
"Formula-Based, 86 
"Linked, 264 
"Move, 648 726 933 986 
"No, 534 539 
"STACK, 309 310 
"Stacks", 3 
"The, 2 520 
"Tower, 605 609 613 
"Type, 517 
"[0]", 307 
"[581742963]", 784 
"[987654321]", 798 
"\fItop\fR1", 305 
"\fItop\fR2", 306 
"are", 522 
"input, 785 
"output, 786 
"stack.h", 511 
#include, 508 509 510 511 
&&, 990 
', 533 
'('), 531 
')'), 532 
(!H), 928 
(!X.S[2], 737 
(!s.IsEmpty()), 537 
(*S[x]), 725 
(*S[y]), 725 
(*X.S[1]), 739 
(?P{rail1}), 914 
(?P{stackclass}),, 369 
(H[i].Top(x), 990 
(IsEmpty()), 177 191 399 426 
(IsFull()), 184 
(Length(), 116 
(MaxStackSize), 113 167 
(Program, 204 97 
(a), 224 242 254 38 447 458 468 
(a)., 234 453 
(a*(b+c)+d), 484 
(a+b))(,, 488 
(b), 231 244 256 38 450 460 470 
(c), 235 246 38 462 
(continued, 407 437 
(d+(a+b)*c*(d+e)-f))((), 550 552 
(expr[i, 531 532 
(i), 355 392 418 
(i.e.,, 215 243 459 819 
(if, 499 
(initialized, 228 
(int, 530 738 931 989 
(largest)., 703 
(last, 46 
(length, 169 
(minH, 936 
(n, 646 723 736 
(n);, 734 735 
(or, 955 
(p[i], 932 
(s, 533 
(say, 693 
(see, 279 
(smallest), 703 
(tower, 571 
(towers, 574 
(x, 941 
*H,, 982 
*H;, 926 
*S[4];, 716 
*expr), 526 
*expr);, 513 
*i, 428 
*i;, 353 390 416 
*p,, 923 
+, 531 725 739 927 988 
+(type, 383 
+(type&, 119 171 346 
-, 178 278 308 531 532 533 538 725 736 985 
-(type&, 121 172 347 384 
-1;, 928 
.1, 302 
.25i, 776 845 
.3i;, 289 
.5i, 311 312 
.5i;, 289 
.AL, 59 79 80 
.AR, 56 61 
.CE, 6 
.CS, 4 
.EH, 221 239 251 444 455 465 
.EX, 220 443 
.KE, 128 199 316 362 408 43 438 545 563 617 656 747 807 85 880 949 997 
.KF, 104 159 25 286 336 372 409 49 504 546 582 639 709 771 841 919 977 998 
.LP, 263 267 475 481 566 750 89 9 
.MB, 222 445 
.NH, 265 477 479 564 7 748 87 
.PE, 313 614 804 877 
.PS, 288 584 773 843 
.RE, 238 248 260 454 464 474 
.RS, 223 241 253 446 457 467 
.T&, 36 
.TE, 39 
.TS, 27 
.US, 817 824 
.b, 866 868 870 
.br, 130 152 52 55 63 65 67 69 71 73 75 77 82 
.eh, 3 
.fi, 125 198 359 404 434 542 560 655 746 948 996 
.ft, 107 124 162 197 339 358 375 403 412 433 507 642 652 712 743 922 945 980 993 
.hl, 1000 105 126 161 195 26 287 314 337 360 373 405 41 410 435 50 505 543 547 561 583 615 641 653 711 744 772 805 83 842 878 921 946 979 994 
.ip, 224 231 235 242 244 246 254 256 447 450 458 460 462 468 470 
.nf, 106 160 338 374 411 506 548 640 710 920 978 999 
.np, 818 822 
.nr, 1 
.nw, 608 612 802 
.oh, 2 264 476 86 
.pp, 145 211 317 363 439 44 493 618 625 657 673 682 696 808 825 881 891 900 904 909 950 958 968 
.sp, 10 268 35 40 482 567 663 665 751 90 
.sw, 875 
.uh, 129 151 
.w, 850 852 862 864 
/, 501 
//, 110 119 121 171 172 420 
//Top, 177 179 399 401 
//Use, 645 721 
//add, 184 186 739 
//delete, 191 193 426 
//initialize, 738 925 
//max, 512 
//rearrange, 929 
0, 277 64 66 70 705 74 78 
0), 646 723 
0., 917 
0.1i, 846 
0.25i;, 774 844 
0.5i, 777 
0.9i, 775 
0;, 177 184 191 399 420 426 737 738 
0;}, 380 392 
0;};, 355 
1, 556 577 620 632 64 66 687 70 703 708 739 74 754 758 766 78 828 
1", 309 605 
1), 571 941 
1);, 736 
1,, 740 769 896 908 930 
1., 667 755 918 
1.3i;, 585 
10, 780 781 782 783 794 795 796 797 866 868 870 
10), 112 166 
100, 549 
100,000, 155 441 
100;, 512 
12, 555 
13%, 217 
16, 555 
19, 556 
1;, 179 186 193 356 393 401 431 530 741 931 943 989 
1;}, 419 
1@", 308 
1@),, 228 
1@., 278 
1], 531 532 
1];, 178 927 
2, 265 272 477 574 577 633 687 7 87 882 897 908 
2", 310 609 
2,, 621 624 628 740 769 893 
2., 630 632 828 
2.1), 204 
2.1)., 97 
2.3., 93 
20, 557 
21, 559 
21%, 440 
22, 558 
23, 558 
2;, 988 
3, 479 564 577 628 631 634 688 748 763 769 827 832 833 898 
3", 613 
3)., 574 
3);, 740 
3,, 624 
30, 298 299 300 
30)., 693 
30;, 297 
4, 1 554 624 892 893 898 
4,, 769 886 
42%, 156 
5, 291 292 293 294 848 850 852 860 862 864 901 
5*w;, 296 
5,, 769 887 
6, 833 835 902 
6,, 769 830 893 
6., 832 
60, 669 
7, 885 894 903 
7,, 769 887 
8, 554 903 
8,, 769 901 
8., 885 887 
9, 768 836 903 
9,, 769 
9., 893 
:, 109 113 164 167 341 377 
<, 941 990 
<<, 517 518 520 522 533 534 535 539 540 648 649 726 727 933 934 986 987 
<=, 530 931 989 
<iostream.h>, 508 
<stdio.h>, 510 
<string.h>, 509 
<type>, 109 164 
=, 112 166 178 185 192 289 290 296 302 354 391 400 417 418 419 427 428 429 512 529 530 585 624 667 669 671 734 735 736 738 763 768 774 775 776 777 844 845 846 927 930 931 940 988 989 991 
==, 116 169 380 531 532 932 936 
>, 646 723 738 889 
?F{paren}., 502 
?F{shunt}(a), 763 
?F{shunt}(a),, 768 
?F{shunt}(a)., 827 
?F{shunt}(b), 769 
?F{stack}(a), 21 
?F{stack}(a)., 14 16 
?F{stack}(b),, 20 23 
?F{stack}(b)., 18 
?F{stack}(c), 23 
?F{tracks}(a)., 840 
?F{tracks}(b), 895 
?F{twostacks})., 279 
?P{clstack}., 371 442 
?P{custom}, 153 200 208 
?P{custom}!, 217 
?P{custom}),, 215 
?P{custom}., 157 
?P{hanoi2}, 697 
?P{hanoi}, 638 674 
?P{hanoi},, 661 678 
?P{hanoi}., 636 658 700 
?P{lstackclass}, 440 
?P{lstackclass}., 335 
?P{paren}, 502 
?P{paren}., 501 
?P{rail1}, 995 
?P{shunt}(a),, 906 
?P{stackclass}, 156 96 
?P{stackclass}., 208 
?p{clstack},, 453 
?p{custom},, 234 
?p{lstackclass},, 453 
?p{rail.h}, 970 
?p{rail.o}, 970 
?p{stackclass},, 234 
@-, 228 
@-@1., 918 
@...@,, 908 
@1~<=~i~<=~k@., 952 
@2, 667 
@3n^-^1@, 689 
@Add(x):@, 72 
@Chain@., 449 
@Create():@, 62 
@Delete(1,x)@., 332 
@Delete(n,x)@, 328 
@Delete(x):@, 76 
@H1@, 833 836 884 897 898 
@H1@,, 764 831 903 
@H1@., 829 901 
@H2@, 837 
@H2@,, 764 885 
@H2@., 835 893 898 902 
@H3@, 836 886 
@H3@,, 885 903 
@H3@., 764 894 903 
@H@., 951 
@H[i]@, 952 
@Hanoi::TowersOfHanoi@, 699 707 
@Hold@, 969 973 
@Insert(0,, 332 
@Insert(n,, 327 
@Insert@, 139 
@IsEmpty():@, 64 
@IsFull():@, 66 
@IsFull@, 364 
@Length()@, 138 
@LinearList@, 135 143 149 154 201 202 204 215 97 
@LinearList@,, 133 
@LinearList@., 147 226 
@LinkedStack@, 448 456 466 
@MaxSize, 278 
@MaxSize@, 229 
@Node@., 366 
@NowOut@, 952 957 962 
@NowOut@., 961 
@Output@, 969 971 995 
@Print@, 150 
@Railroad@, 951 969 
@Railroard@, 914 
@S[1^:^3]@, 700 
@Search@., 150 
@Stack@, 133 146 153 196 214 215 225 369 
@Stack@", 129 151 
@Stack@., 134 142 
@Top(x):@, 68 
@TowersOfHanoi(n)@, 698 
@TowersOfHanoi(n,1,2,3)@., 637 
@c@, 973 
@element[0]@., 95 
@element[length^-^1]@, 94 
@i@, 959 
@i@,, 952 
@k@, 762 763 910 911 916 
@minH@, 953 972 975 
@minH@., 955 
@minS@, 954 975 
@minS@., 972 
@moves(n)@, 667 
@moves(n)@:, 662 
@moves(n)~=~, 664 
@n@, 233 328 452 503 619 624 669 685 686 687 693 703 752 753 754 755 758 765 766 768 915 
@n@,, 693 908 
@n@., 691 
@n^-^1@, 628 631 908 913 
@n^-^1@,, 908 
@n^-^1@., 688 
@p[1^:^n]@., 915 
@p[i]@, 959 961 965 966 
@s@, 100 101 
@stack@, 226 
@s~+~x@, 99 
@s~-~x@, 101 
@t(n)@, 658 659 671 
@top@, 227 
@type@, 149 
@u@, 888 
@u@\fR., 889 
@v@, 889 
@x@, 100 
@x@., 102 
@x@;, 68 
A, 11 13 501 626 752 780 794 806 819 823 849 861 
A+(2*x+2*y,0), 780 794 
A+(3/2*x+2*y,-0.2), 786 
A+(3/2*x+2*y,.2), 798 
A+(x+2*y,-h), 783 797 
A+(x+2*y,-h-0.2), 789 801 
A+(x+2*y,0), 783 797 
A+(x+y,-h), 782 796 
A+(x+y,-h-0.2), 788 800 
A+(x+y,0), 782 796 
A+(x,-h), 781 795 
A+(x,-h-0.2), 787 799 
A+(x,0), 781 795 
A+(x/2,-0.2), 785 
A+(x/2,.2), 784 
A.e+(d,0), 850 862 
A.ne+(.3,0), 608 
A.ne+(0.4,0), 802 
A.s-(0,0.2), 854 872 
A.se+(1,0), 875 
A.t+(0,s), 866 
A:, 291 
A:Here, 779 793 
A:[, 778 847 
A:[B:line, 586 
A:box, 848 860 
ABSTRACT, 8 
ADT, 240 252 48 
APPLICATIONS, 478 
A\(<-@bottom@, 34 
Abstract, 2 
According, 570 580 
Also,, 134 
An, 274 
Another, 146 207 676 
As, 333 369 578 690 704 
Assume, 753 
B, 33 851 863 
B.e+(d,0), 852 864 
B.ne+(.3,0), 612 
B.s-(0,0.2), 855 873 
B.t+(0,s), 868 
B:, 292 
B:[, 792 859 
B:[B:line, 606 
B:box, 850 862 
B:line, 591 595 599 604 
B\(<-@top@, 33 
Besides, 574 
Both, 102 
Brahma, 569 
Brahma,, 669 
Brahman, 576 670 
C, 32 853 865 
C++, 225 448 490 500 636 
C.s-(0,0.2), 856 874 
C.t+(0,s), 870 
C:, 293 
C:[B:line, 610 
C:box, 852 864 
CW, 107 162 339 375 412 507 642 712 922 980 
Car, 827 882 894 
Cars, 749 
Chain<type>, 341 377 
Chain<type>::IsEmpty();}, 343 
ChainNode<type>, 353 390 416 428 
ChainNode<type>;, 354 391 417 
Chapter, 272 667 
Class, 361 
Combine, 257 471 
Consequently,, 966 
Consider, 827 
Create, 62 
Customized, 151 196 406 436 
D, 31 867 
D:, 294 866 
DATA, 8 
D\(<-@top@, 31 
Data, 2 
Definition, 151 
Delete(1,, 347 
Delete(Length(),, 122 
Deletions, 18 
Determine, 243 459 
E, 869 
E:, 868 
E\(<-@top@, 30 
Each, 329 332 752 
Examining, 661 
Extend, 240 252 456 466 
F, 871 
F:, 298 870 
FORMULA-BASED, 88 
Final", 803 
Find(1,, 345 
Find(Length(),, 118 
Following, 139 20 902 
For, 137 147 484 693 907 
Formula-based, 127 
From, 45 671 
Function, 914 951 
G:, 299 
H, 927 
H,, 937 940 
H1, 1 
H:, 300 
H[minS], 985 
Hanoi, 565 616 654 690 713 733 745 
Hanoi::TowersOfHanoi, 732 
Hanoi::TowersOfHanoi(int, 719 
Hanoi\*(ZQ, 568 
Hanoi\fR, 619 
Hence, 19 
Hold(p[i],, 940 
However,, 321 832 
I.e.,, 226 
If, 22 324 686 810 812 831 884 885 917 961 965 
In, 154 483 488 579 619 768 916 959 
Initial", 791 
Input, 245 461 
Insert(0,, 346 
Insert(Length(),, 120 
Interestingly,, 214 
IsEmpty(), 114 168 343 380 
IsFull(), 115 169 
IsFull();, 344 381 
It, 897 916 972 974 
LIFO, 110 46 814 
LINKED, 266 
Let, 658 
LinearList, 109 164 
LinearList<type>, 113 167 
LinearList<type>::IsEmpty();}, 114 168 
Linked, 911 
LinkedStack, 341 377 
LinkedStack<int>, 926 927 982 
LinkedStack<type>::IsFull(), 351 388 
LinkedStack<type>::Top(type&, 397 
LinkedStack<type>::operator+(type&, 414 
LinkedStack<type>::operator-(type&, 424 
Lists, 46 
Matching, 480 
MaxLength, 512 518 
MaxLength);, 519 
MaxSize);}, 116 169 
MaxStackSize, 112 166 
Measure, 233 452 
Multiple, 318 
New, 14 
Next,, 898 
No, 557 559 899 
Notice, 132 
Now, 249 261 
Now,, 275 630 
NowOut, 930 
NowOut), 932 936 
NowOut++;, 935 
NowOut++;}}, 938 
Obtain, 225 448 
Of, 129 
On, 330 918 
One, 12 667 
Our, 490 
Output(int&, 981 
Output(minH,, 937 
Parenthesis, 480 
Print, 247 463 
PrintMatchedPairs(char, 513 526 
PrintMatchedPairs(expr);, 523 
Program, 544 
Programs, 234 453 970 
R, 124 197 358 403 433 652 743 945 993 
REPRESENTATION, 266 88 
Railroad, 947 
Railroad(int, 923 
Railroard, 749 
Rearranging, 749 
Recursive, 636 654 
Representation", 264 86 
Return, 64 66 
STACKS, 5 
Sample, 562 
Section, 93 
Since, 200 575 669 683 91 
So,, 209 677 685 689 691 829 835 
Split, 255 469 
Stack, 109 164 42 
Stack(int, 112 166 
Stack<int>, 528 716 734 735 736 
Stack<type>::Top(type&, 175 
Stack<type>::operator+(type, 182 
Stack<type>::operator-(type&, 189 
Suppose, 15 
THE, 8 
TYPE, 8 
The, 131 255 258 271 278 285 334 364 370 440 469 472 48 486 500 502 551 568 571 620 632 637 638 667 684 697 700 702 705 755 760 765 814 830 836 84 840 896 901 93 956 96 969 973 98 99 
Then, 901 903 
They, 621 
This, 142 157 16 203 212 320 366 496 660 666 679 828 960 963 
To, 627 632 678 756 809 910 
Top(type&, 117 170 345 382 
Tower, 569 669 
Towers, 565 616 654 690 745 
TowersOfHanoi(int, 643 715 731 
TowersOfHanoi(n-1,, 647 650 724 728 
Track, 879 
Two, 315 
Type, 549 
Type", 2 
Unfortunately,, 136 
Using, 893 
We, 141 494 658 890 
What, 236 
When, 279 323 498 707 758 816 892 
While, 269 282 674 882 905 
With, 218 
Write, 232 451 
X.A.t+(0,.2), 307 
X.D.e, 311 
X.D.t, 303 
X.D.t+(0,.4), 303 
X.D.t+(0,.4+y), 305 
X.S[1], 734 
X.S[2], 735 
X.S[3], 736 
X.TowersOfHanoi(n,, 740 
X.b-(0,.2), 309 
X:[boxht, 290 
X;, 733 
Y, 588 608 612 
Y+(0,2), 588 
Y+(0,2)], 608 612 
Y+(d*d*d*x/2,.2), 598 599 
Y+(d*d*d*x/2,0), 598 
Y+(d*d*x/2,.2), 594 595 
Y+(d*d*x/2,0), 594 
Y+(d*x/2,.2), 590 591 
Y+(d*x/2,0), 590 
Y+(e*x/2,.2), 602 
Y+(e*x/2,.2)], 604 
Y+(e*x/2,0), 602 603 
Y-(d*d*d*x/2,-.2), 597 599 
Y-(d*d*d*x/2,0), 597 
Y-(d*d*x/2,-.2), 593 595 
Y-(d*d*x/2,0), 593 
Y-(d*x/2,-.2), 589 591 
Y-(d*x/2,0), 589 
Y-(e*x/2,-.2), 601 604 
Y-(e*x/2,0), 601 603 
Y.E.t, 304 
Y.E.t+(0,.4), 304 
Y.E.t+(0,.4+y), 306 
Y.E.w, 312 
Y.H.t+(0,.2), 308 
Y.b-(0,.2), 310 
Y:B.c, 587 592 596 607 611 
Y:B.c+(0,1), 600 
Y:[E:, 297 
You, 623 
[].s-(0,.2), 605 609 613 
[].s-(0,.5), 791 803 858 876 
[k, 927 
\(*H(1), 322 332 
\(*H(1)., 132 285 
\(*H(@2, 672 
\(*H(@n@), 329 
\(*H(@n@),, 502 
\(<=, 693 
\*(LQD\*(ZQ, 17 
\*(LQE\*(ZQ, 15 
\*(LQE\*(ZQ., 20 
\*(LQTowers, 568 
\*(OH(@ArraySize@), 285 
\fB?F{14.2}:\fR, 616 
\fB?F{paren}:\fR, 562 
\fB?F{shunt}:\fR, 806 
\fB?F{stack}:\fR, 42 
\fB?F{tracks}:\fR, 879 
\fB?F{twostacks}:\fR, 315 
\fB?P{clstack}:\fR, 406 436 
\fB?P{custom}:\fR, 196 
\fB?P{hanoi2}:\fR, 745 
\fB?P{hanoi}:\fR, 654 
\fB?P{lstackclass}:\fR, 361 
\fB?P{paren}:\fR, 544 
\fB?P{rail.o}:\fR, 995 
\fB?P{rail1}:\fR, 947 
\fB?P{stackclass}:\fR, 127 
\fBADT, 84 
\fBADT\fR, 51 
\fBcout\fR, 148 
\fBfor\fR, 140 154 441 956 959 
\fBinstances\fR, 54 
\fBint\fR., 704 
\fBnew\fR, 367 
\fBoperations\fR, 60 
\fBwhile\fR, 963 
\fIAdd\fR, 98 
\fIAll, 826 
\fIDelete\fR, 98 
\fINotice, 838 
\fIStack\fR, 127 51 96 
\fIThe, 887 
\fITowers, 619 
\fIassignment, 890 
\fIat, 956 
\fIbottom\fR, 12 
\fIbottom\fR;, 57 
\fIinput, 761 
\fIoutput, 761 
\fIstack\fR, 11 
\fItop\fR., 13 
\fItop\fR;, 58 
\fIx\fR, 72 
\fIx\fR;, 76 
\h'|\nQu'return, 70 74 78 
\kQAdd, 72 
\kQDelete, 76 
\kQReturn, 68 
\n(H1.1., 48 
\n(H1.1:\fR, 84 
], 295 301 790 802 857 875 
`+', 99 
`-',, 99 
`0', 102 
`1', 103 
`==', 148 
a, 135 138 140 154 18 232 245 247 249 255 261 269 281 282 318 320 323 333 334 361 365 366 441 45 451 46 461 463 469 483 490 491 497 498 571 578 579 622 623 633 670 676 680 683 684 687 688 689 691 698 704 753 760 763 812 814 823 830 838 889 91 914 939 957 96 966 971 973 
about, 236 
above, 664 671 910 
above,, 216 
abstract, 84 
accesses, 200 
accessing, 143 
actually, 103 
adapted, 281 
add, 100 119 138 15 155 171 205 233 284 365 420 441 452 
added, 14 966 
adding, 240 252 
addition,, 579 
additions, 325 91 
adequate, 675 
afresh, 142 214 226 
after, 569 699 708 
all, 147 257 471 
already, 136 
also, 157 18 671 680 830 972 974 
alternating, 232 451 
always, 14 
amount, 692 
an, 11 138 19 226 227 228 232 315 365 451 517 549 580 62 677 761 
analysis, 690 
ancient, 569 
and, 101 103 13 136 138 148 150 155 190 205 213 216 226 228 233 234 255 270 275 278 326 328 332 367 425 441 452 453 469 483 485 489 491 572 574 619 624 628 632 634 680 687 694 708 754 76 761 762 764 766 768 812 814 828 829 833 885 886 887 893 898 903 92 94 954 962 969 970 972 975 98 99 
animate, 675 
animation, 680 
any, 634 685 882 883 954 
any), 499 
appear, 46 
are, 102 136 14 149 19 201 202 22 271 275 280 326 331 483 497 553 574 578 619 620 621 630 683 686 702 753 755 757 758 766 768 816 826 838 893 905 906 911 969 
arises, 888 
arrangement, 827 907 
arrangement,, 811 
arrangements., 907 
array, 226 269 279 281 315 951 
arrays, 272 
arrow, 303 304 311 312 
as, 135 149 202 215 271 364 367 491 497 633 684 814 828 832 836 912 
assignment, 893 967 974 
associate, 324 330 
at, 137 14 158 277 278 305 306 307 308 309 310 485 486 487 488 489 499 517 534 539 549 557 559 570 578 579 605 608 609 612 613 685 753 759 760 784 785 786 787 788 789 791 798 799 800 801 802 803 827 849 850 851 852 853 854 855 856 858 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 889 892 899 916 92 
at-a-time, 622 
at/from, 205 
attempt, 623 
attempting, 576 
attempts, 916 
available, 632 706 
available,, 707 
back-to-front., 769 
be, 131 136 142 148 16 20 203 275 280 281 318 321 578 579 621 633 635 658 666 668 677 678 684 692 695 752 819 823 828 830 832 833 839 882 883 886 899 962 965 
becomes, 284 
been, 136 576 708 98 
before, 624 833 
begin, 765 
begins, 951 
being, 634 681 810 
below, 832 
between, 213 762 
binary, 99 
both, 270 
bottom, 255 277 278 469 573 627 94 
bottom-to-top., 621 
box, 291 292 293 294 296 297 298 299 300 849 851 853 861 863 865 866 868 870 
boxht, 774 844 
boxwid, 290 296 774 844 
boxwid;, 774 844 
by, 133 141 142 149 204 234 240 252 257 277 366 370 453 471 658 678 686 694 755 828 912 951 962 969 98 
c, 37 
c., 37 
called, 13 57 
can, 141 142 203 230 236 275 318 321 365 369 578 579 633 634 667 668 686 692 882 899 965 
cannot, 828 832 839 965 
capacity, 687 688 
car, 759 810 819 823 830 832 833 835 836 838 883 886 888 889 892 893 896 897 898 901 902 903 924 933 947 953 955 957 959 960 961 965 971 973 974 986 
car,, 830 836 886 896 901 
cars, 755 756 757 758 760 765 768 770 809 814 828 885 887 892 899 905 915 963 
cars,, 809 816 
cars., 752 
case, 282 284 369 705 916 
chain, 318 323 324 325 327 329 330 331 333 
chain., 329 
chances, 134 
changes, 201 202 
char, 516 
character, 484 
checks, 139 
chosen, 975 
cin.getline(expr,, 519 
cited, 272 
class, 109 127 134 142 146 147 150 153 164 201 204 214 225 226 249 261 334 341 369 377 448 449 456 466 713 96 97 
co-exist., 271 275 
code, 134 141 155 156 200 207 214 216 217 225 234 250 262 370 440 442 448 453 636 697 
code., 370 
codes., 144 154 
come, 137 158 580 
compiler, 218 
complete, 500 837 
completed, 581 832 
completed\fR., 839 
complexity, 131 502 690 
comprised, 761 
computer, 676 680 692 
computing., 47 
configuration, 17 21 
configurations, 42 
considered, 269 882 
considered,, 892 
const, 512 
contain, 684 
contains, 255 469 955 
correct, 135 
correct., 136 
correctness, 638 
corresponds, 324 
cost, 137 
cost., 158 
cout, 517 520 522 533 534 539 648 726 933 986 
create, 366 706 
created, 367 570 
creates, 700 
creation,, 575 
current, 840 895 
customize, 143 153 
customized, 156 217 370 442 
customizing, 370 
d, 845 
d=.9;, 585 
data, 149 84 
debug., 210 
decide, 323 
decreasing, 572 620 
deficiencies,, 678 
deficiency, 676 
defined, 148 96 
definition, 153 249 261 334 361 
delete, 101 121 155 172 19 205 233 285 430 441 452 
deleted, 102 500 
deleting, 367 
deletion,, 21 
deletions, 22 326 92 
derived, 146 215 96 
deriving, 133 
described, 216 
designated, 12 
desired, 770 
destination., 756 
detached, 759 829 
detected, 678 
determine, 138 
develop, 214 
development, 237 
dialogue, 501 
diamond, 571 574 
did, 156 442 
difference, 218 694 
different, 236 753 
difficulty, 146 
diminish., 219 
directly, 811 
discussion,, 45 
disk, 579 621 622 627 633 634 648 660 677 681 726 739 
disk., 579 
disks, 571 576 578 619 620 628 631 634 644 668 683 685 687 689 702 720 
disks,, 675 
disks., 571 
display., 676 
displayed, 679 
do, 367 632 916 
does., 834 
doesn't, 676 
doing, 912 
done, 142 366 760 963 
due, 917 
e=.5, 585 
each, 131 318 320 321 494 683 684 687 704 759 
earlier, 690 
easily, 638 679 
efficiency, 275 
efficiency., 213 
efficient, 283 
efficient,, 270 
efficiently, 318 
effort, 133 
eight, 485 
eight., 487 
either, 142 695 836 
elegant, 270 626 
element, 100 101 102 138 140 15 16 17 19 190 20 228 365 398 425 68 72 76 93 94 
element., 321 
element[--length];, 192 
element[length, 178 
element[length++], 185 
elements, 13 14 229 255 257 258 469 471 472 
elements), 243 459 
elements,, 227 
elements., 12 255 469 686 913 
elements;, 57 
eleven, 486 
eleven., 485 
eliminate, 141 
else, 532 534 939 
empty, 62 
empty,, 64 
encountered, 497 
encountered,, 498 
end, 12 206 323 325 330 333 57 580 766 821 823 
end), 819 
end,, 92 
endl;, 518 520 522 533 649 727 934 987 
endl;}, 535 540 
enough, 365 674 705 707 
enter, 814 
equal, 660 
equals, 961 
error, 677 678 
established., 638 
ever, 622 
exactly, 685 
examine, 809 
examined, 810 
example, 806 
example,, 137 484 907 
exception, 274 
execute, 440 
exists, 366 
expand;, 28 
expect, 218 
expected, 210 
experiment, 216 
explicitly, 676 
exponential, 691 
expr[MaxLength];, 516 
expression, 100 512 517 549 551 99 
expression", 520 
extend, 249 261 
extending, 204 
facilitate, 756 
fact, 632 
fact,, 668 
fails, 177 184 191 399 420 426 916 
fails,, 70 74 78 
failure, 201 917 
fashioned, 569 
faster, 217 
few, 670 
field, 320 
finish, 670 
first, 138 255 380 419 429 46 469 683 
first->data;, 400 427 
first->link;, 429 
first., 258 472 
first;, 418 428 
following, 456 466 661 678 816 
for, 135 153 214 225 250 262 272 273 318 320 361 448 492 530 534 539 557 559 577 623 636 645 654 662 674 680 686 689 692 698 721 732 738 887 906 913 917 931 989 
forbidden\fR., 826 
formula-based, 249 261 686 694 697 912 
four, 13 485 487 571 
freight, 752 754 765 
frequently, 47 
from, 101 121 133 172 18 19 215 258 303 304 311 312 437 472 500 576 588 589 590 591 593 594 595 597 598 599 601 602 603 604 608 612 626 631 634 644 648 674 683 720 726 756 76 780 781 782 783 794 795 796 797 815 819 823 897 898 901 902 903 905 934 959 971 983 986 
front, 819 
front-to-back., 758 810 
front., 827 
full,, 66 
function, 654 698 699 973 995 
functions, 102 240 252 969 98 
functions., 250 262 
further., 624 
future, 887 
generated., 660 
get, 627 686 
given, 335 371 501 619 969 
gives, 153 229 
giving, 17 
go, 953 
golden, 571 
grow, 279 
h, 289 777 
h;, 290 
half, 255 469 
hand,, 330 
has, 137 157 484 488 489 633 690 752 889 
have, 133 134 136 16 576 581 632 687 688 708 768 885 886 98 
heavy,, 578 
hold, 983 
hold., 230 
holding, 762 763 812 814 821 823 829 830 838 840 882 883 888 890 892 895 905 908 911 916 925 939 952 954 957 963 966 971 973 975 986 
however, 157 
i, 354 391 417 530 533 535 726 738 739 931 989 
i++), 530 931 989 
i--), 738 
i->link, 418 
i;, 355 392 419 430 531 722 725 739 
i;}, 991 
if, 102 103 139 177 184 19 191 214 330 355 365 392 399 418 426 494 531 532 64 646 66 675 677 70 723 737 74 78 928 932 941 961 976 990 
ignored, 633 
illustrates, 212 
implement, 910 
implementation, 135 364 
implementation,, 283 
implemented, 326 98 
impossible, 837 
improve, 369 
improved, 134 
improvement, 157 218 
in, 102 139 14 157 190 215 218 228 258 269 272 281 282 315 321 328 335 369 371 425 46 47 472 48 483 498 501 502 520 551 572 620 636 668 669 677 679 68 683 691 694 705 754 758 759 76 765 766 768 770 811 813 814 838 839 840 883 884 915 94 95 954 957 96 963 970 995 
include, 205 249 261 456 466 
increased, 137 
increases, 962 
increasing, 839 884 
incurs, 320 
inefficiency, 272 
inelegant, 364 
information, 679 
initial, 637 906 907 915 
initializing, 951 
initially, 620 768 
input, 494 501 503 762 765 809 820 827 901 902 934 960 
inputs, 490 
insert, 139 
instance,, 147 
instructions, 971 974 
int, 114 115 117 119 121 168 169 170 171 172 175 182 189 343 344 345 346 347 351 380 381 382 383 384 388 397 414 424 512 529 643 715 719 722 731 923 930 940 982 984 
int&, 981 
integer, 227 228 
integrity, 203 
intend, 368 
intermediate, 577 645 721 
into, 255 257 469 471 835 836 882 973 
invariant, 956 
invocation, 637 
invoke, 139 
invokes, 707 
invoking, 367 
involved, 154 208 213 
is, 103 11 12 13 131 139 14 140 146 201 207 208 210 215 259 270 274 328 335 364 365 366 371 46 473 48 490 492 495 498 499 500 501 502 503 569 57 58 622 633 636 637 638 64 659 66 660 667 674 676 677 679 680 689 691 695 698 699 704 705 707 752 757 759 760 810 811 812 813 827 828 829 830 831 833 835 836 840 882 884 888 892 893 894 896 897 898 901 902 903 91 912 917 94 952 953 954 957 959 96 960 961 963 966 
is,, 668 
isn't, 675 
it, 20 201 210 270 499 633 670 675 676 707 757 76 811 812 813 828 829 831 836 837 882 884 885 916 917 918 962 
it., 368 635 
iteration, 959 
its, 138 889 
j, 533 539 
j), 533 
j,, 529 
j;, 538 
just, 698 
k), 923 
k,, 937 940 982 
k;, 989 
know, 364 
known, 136 
l, 29 
l., 29 
label, 677 681 889 952 954 955 957 
labeled, 755 
labels, 838 883 
lack, 917 
larger, 633 
largest, 229 627 629 
last, 605 609 613 683 759 791 803 858 876 
later., 678 
least, 668 887 
leave, 814 833 
left, 312 330 333 483 484 486 487 489 495 497 499 500 539 559 630 664 753 812 821 823 
left-to-right, 494 498 
legend,, 570 580 
length, 503 512 517 529 549 
length;, 530 
lie, 762 
limitations, 147 
line, 588 589 590 593 594 597 598 601 602 603 608 612 780 781 782 783 794 795 796 797 
linear, 91 92 
lines, 659 
linked, 334 361 406 436 685 695 910 951 
list, 11 12 57 91 92 
list., 206 46 
lists, 273 281 
longer, 210 
loop, 140 441 956 
loop,, 956 959 
loop., 964 
made, 202 
main(void), 514 
maintained, 276 
maintains, 956 
make, 677 837 
making, 225 448 
manner, 814 
manner,, 683 
manually, 674 
match, 483 534 539 557 559 
match., 492 
matched, 491 495 499 500 544 
matches, 486 487 
matching, 488 489 520 551 562 
may, 218 281 623 666 678 684 695 819 823 92 962 
measure, 232 451 
members, 143 149 150 201 205 
members., 203 
memory,, 917 
memory., 679 
merits/demerits, 236 
method, 666 
methods, 135 
middle, 279 
minH, 930 986 988 991 
minH), 990 
minH,, 940 981 
minS, 987 991 
minS,, 937 940 981 
minS;, 930 
modeled, 699 
more, 156 208 279 440 906 962 
most, 495 517 549 916 
motivates, 496 
move, 576 628 674 675 678 885 897 914 960 962 971 974 
moved, 578 621 634 811 812 819 823 829 830 831 882 884 886 888 893 894 896 898 899 901 902 903 959 961 965 
moved., 668 677 681 965 
moves, 660 668 678 708 816 826 
moves,, 662 
moves., 140 
moving, 630 884 
multiple, 271 281 282 
must, 323 687 688 833 
n, 644 667 720 988 
n), 731 982 
n);, 937 940 
n+1,, 930 
n,, 643 715 719 923 
n;, 738 931 
n>0}@, 664 
n@)., 672 
necessary, 708 757 
necessary., 976 
need, 148 
needed, 133 233 452 906 
needed., 689 
new, 216 354 391 417 734 735 736 888 927 
next, 407 810 830 836 886 896 901 
next., 882 
next;, 953 
no, 488 489 492 579 622 885 887 965 
node, 366 367 
nodes, 328 
non-public, 200 
not, 215 365 367 678 705 838 957 
not,, 812 
now, 897 
number, 229 243 328 459 659 660 662 668 
numbered, 703 753 
objective, 490 
objects, 110 
observe, 494 
obtain, 661 671 
obtaining, 135 
of, 100 12 131 135 137 14 143 147 149 151 155 157 16 17 196 20 200 201 203 206 207 208 21 212 217 225 229 23 232 234 236 243 249 257 258 261 269 271 272 277 278 279 282 320 324 325 328 329 330 332 333 334 364 366 369 440 441 442 448 451 453 459 46 471 472 491 496 499 502 503 517 520 549 551 562 565 568 569 57 572 573 575 579 616 619 621 622 626 628 630 635 638 649 654 659 660 662 666 668 669 677 679 68 681 687 688 689 690 692 693 697 699 701 704 745 756 760 761 765 815 820 821 823 827 840 882 892 895 906 914 917 924 93 953 954 956 959 962 97 
on, 149 16 23 258 407 472 497 572 579 620 622 633 635 676 680 809 887 
one, 218 257 277 320 471 485 486 57 578 621 811 821 962 
one., 622 
ones, 912 
only, 202 275 364 578 692 913 961 
only., 19 
operate, 814 
operation, 103 321 70 74 78 
operations, 131 148 327 329 331 442 
operations,, 155 
operations., 233 452 
operations:, 456 466 
operator, 119 121 171 172 346 347 383 384 
operators, 99 
or, 142 365 821 837 962 
order, 258 472 573 621 755 758 766 769 839 924 
order,, 759 884 
order., 770 
ordered, 11 57 
ordering, 906 915 
other, 13 278 330 574 58 826 899 906 
otherwise, 70 74 78 
otherwise;, 64 66 
our, 134 143 690 893 
out, 683 
out), 46 
out., 963 
output, 501 544 659 674 678 680 762 766 811 812 821 823 828 833 896 897 899 902 953 960 961 972 983 
output", 934 987 
output,, 965 
output., 708 813 
outputs, 491 914 971 974 
overcome, 204 
overhead, 140 
overheads, 141 
overloading, 98 
p[1:n], 924 
p[i], 933 
page), 407 437 
paid, 140 
pairs, 491 520 551 
parentheses, 483 484 485 491 492 497 520 544 551 
parenthesis, 486 487 488 489 495 498 499 500 534 539 557 559 562 
parenthesis., 490 495 
part, 234 453 
pegging, 277 
penalty, 320 
perform, 103 140 216 
performance, 157 219 370 
performed, 22 321 
performed., 103 660 
permitted:, 816 
place, 18 813 885 887 92 
placed, 16 635 
placement, 888 
placing, 257 471 
pointer, 320 
points, 227 
position, 277 278 486 496 
positions, 485 
possible, 962 
potential, 146 
preceded, 828 
preceding, 45 
preferred., 884 
preprocessor, 698 700 705 
preserve, 203 
previous, 269 437 
priests, 576 581 670 
problem, 203 207 568 623 691 692 
problem,, 483 
problem\fR,, 619 
program, 213 232 451 490 501 562 947 
prone, 201 
proportional, 659 
protected, 109 143 164 341 377 
provided, 636 
public, 203 205 
public:, 111 165 342 379 714 
purposes, 680 
put, 835 836 
puts, 973 
puts(expr);, 521 
putting, 836 
quite, 670 
railroad, 755 756 
railroard, 752 
range., 139 
rather, 285 911 
reading, 624 
rearrange, 809 905 
rearranged, 770 
rearrangement, 760 831 839 910 924 947 
rearrangement., 837 
rearranging, 816 915 
reasonable, 691 
reasons, 271 
recently, 495 
rectify, 678 
recurrence, 661 666 
recurrence,, 671 
recursion., 626 
recursive, 698 
reduced, 133 
relative, 258 472 
remaining, 255 469 628 
remains, 285 
removal, 756 
removed, 683 
reorder, 757 
represent, 323 911 
representation, 269 281 320 93 
representation., 274 
representations, 695 
represented, 318 684 
represented,, 280 
represents, 333 952 
required, 202 694 912 
requirement, 883 
requires, 908 
respectively., 970 99 
restriction, 91 
restrictions, 887 
result, 333 667 
result,, 704 
resulting, 334 
results, 282 626 915 
results., 22 24 
return, 101 102 177 179 184 186 190 191 193 355 356 392 393 399 401 419 420 425 426 431 64 66 70 737 74 741 76 78 928 941 943 
returns, 705 708 917 918 
reuse, 213 
right, 206 311 324 483 485 486 487 488 490 494 498 534 557 586 606 610 819 
right-to-left., 767 
ritual., 570 
rule,, 893 
rule., 967 974 
rule\fR, 890 
run, 137 154 216 232 370 451 562 
runs, 216 
s, 531 538 846 
s(MaxLength);, 528 
same, 271 92 
sample, 501 
satisfying, 883 
save, 496 
say, 236 
scan, 494 
scan., 498 
scheme,, 910 
screen, 680 
second, 255 257 259 469 471 473 
section, 270 
see, 365 45 658 
seen, 131 495 
select, 890 
separate, 272 273 
sequence, 232 451 675 678 914 
seven, 489 
several, 678 
shade, 291 292 293 294 297 298 299 300 848 850 852 860 862 864 866 868 870 
shall, 890 
show, 667 
shown, 14 840 
shown,, 690 
shows, 763 770 895 
shunting, 760 763 
significantly, 134 
simplification, 137 
single, 281 
six, 488 
sixty, 571 
size, 243 459 572 573 621 
small, 693 695 
smaller, 579 622 
smallest, 889 953 
so, 634 757 833 965 
so,, 912 
software, 213 236 
solution, 623 626 636 671 
solved, 666 692 
some, 158 212 
somewhat, 208 
space, 271 275 283 320 366 686 689 694 705 707 912 
specified, 48 
specify, 677 
stack, 100 101 119 121 13 131 15 155 171 172 18 183 19 228 23 230 233 240 249 252 255 257 259 261 269 277 321 324 325 331 334 361 365 406 415 436 45 452 456 469 471 473 48 497 64 66 68 704 76 84 91 93 951 
stack), 955 
stack,, 138 323 
stack., 15 243 245 247 319 459 461 463 499 500 684 
stack;, 62 72 
stacked, 572 620 
stacks, 257 271 275 278 280 315 318 471 686 700 745 910 911 
stacks,, 685 
stacks., 282 697 706 
start, 226 956 
starting, 142 
state, 678 679 840 895 
stated, 966 
states, 701 879 
station., 753 759 
stations, 753 
storage, 645 721 
storage., 577 
store, 227 678 701 
stored, 94 
string, 484 488 491 494 
string., 484 503 
strlen(expr);, 529 
styles, 237 
subject, 146 
substitution, 666 
succeeds, 179 186 193 401 
success,, 918 
successfully, 708 
successive, 22 
such, 622 889 
sufficient, 905 
sufficiently, 695 
sup, 667 672 
tailoring, 141 
take, 18 210 670 92 
taken, 658 
takes, 329 332 
task, 630 
task., 581 670 
technology,, 218 
template<class, 108 163 174 181 188 340 350 376 387 396 413 423 
test, 154 
tested, 136 
than, 156 208 217 279 285 442 911 
that, 132 146 207 208 227 229 45 490 494 622 632 634 658 667 676 677 695 701 753 754 757 762 838 883 889 91 912 914 953 955 
the, 100 101 103 12 13 131 133 134 135 137 139 14 141 143 146 147 148 149 15 153 154 155 156 17 19 20 200 201 203 204 205 206 207 21 212 214 216 217 225 227 228 229 23 232 233 236 240 243 249 252 255 257 258 261 269 271 272 277 278 279 281 282 284 324 325 326 328 329 330 331 333 364 367 369 370 442 448 45 451 452 456 459 466 469 471 472 483 484 486 487 488 489 491 494 495 496 499 500 503 520 551 569 57 570 572 575 576 578 58 580 619 626 627 628 629 630 632 634 644 658 659 660 661 662 666 668 669 670 671 674 675 677 678 679 680 681 690 692 694 698 699 70 700 701 708 72 720 74 753 754 756 757 758 759 762 765 766 768 770 78 809 810 811 813 815 816 819 820 821 823 827 829 831 837 838 839 840 882 883 886 888 890 892 895 896 897 899 902 905 906 907 91 910 911 912 92 93 94 951 952 953 954 955 956 957 959 960 961 963 965 966 972 973 974 975 99 
their, 581 670 755 
then, 139 325 331 367 494 628 885 886 894 898 965 
there, 492 570 574 812 
these, 141 149 202 250 262 329 332 678 693 706 754 815 
they, 102 497 578 757 
thick, 780 781 782 783 794 795 796 797 
this, 12 136 218 282 46 483 574 623 632 633 636 668 678 759 890 899 916 956 
this,, 140 333 902 
those, 258 272 472 491 
three, 22 619 679 684 700 701 706 806 892 905 
through, 703 754 755 758 766 
till, 678 
time, 154 156 216 232 275 284 285 370 440 451 502 570 575 579 658 813 897 
time,, 692 
time., 137 322 329 333 578 685 899 
times, 233 452 
to
to:, 240 252 
together, 684 
took, 156 440 
top, 100 101 14 16 19 190 228 258 398 425 472 499 579 622 635 644 648 649 68 720 76 815 820 823 889 892 93 
top,, 325 331 
top-to-bottom,, 839 
top., 324 334 573 
total, 689 
towards, 279 
tower, 571 572 574 577 620 621 628 630 631 632 633 634 644 645 648 649 683 684 688 720 721 726 727 739 
towers, 574 632 679 684 687 
towers., 620 701 
track, 765 766 806 809 812 820 823 829 838 883 888 902 924 939 952 953 954 960 966 967 971 973 975 986 
track", 785 786 
track,, 961 
track., 812 815 821 823 830 890 896 897 902 960 972 
track\fR,, 761 
track\fR., 957 
tracks, 762 764 814 821 840 882 892 905 906 925 963 
tracks,, 917 954 
tracks., 762 895 908 911 916 
tradeoffs, 213 
train, 752 754 757 765 
two, 257 275 278 280 471 574 
two., 255 469 
type, 149 366 46 704 84 
type>, 108 163 174 181 188 340 350 376 387 396 413 423 
unable, 103 
unchanged., 259 473 
unmatched, 495 
until, 813 
up, 766 
updates, 972 975 
us, 17 496 674 
use, 225 226 331 368 448 626 890 910 92 
used, 149 911 995 
used,, 686 
used., 695 
used?, 237 
useful, 680 
uses, 697 
using, 318 323 326 577 666 685 691 745 916 966 973 
utilized, 969 
values, 693 
variable, 102 227 229 
version, 196 
very, 578 626 
visits, 754 
void, 513 514 526 643 715 719 981 
w, 289 290 296 
was, 570 571 
wasteful, 270 
way, 364 
we, 133 134 138 15 153 19 214 323 324 330 365 367 369 45 483 494 619 628 630 632 661 671 675 677 678 686 768 809 885 886 910 92 
well, 491 
were, 571 572 
when, 153 201 271 275 580 888 
whenever, 838 
where, 328 502 
whether, 365 
which, 139 154 323 492 668 699 760 889 
while, 100 487 537 688 883 936 
will, 100 101 16 20 580 670 701 832 837 886 
wish, 15 623 675 
with, 13 155 325 330 571 608 612 630 686 763 802 850 852 862 864 866 868 870 875 889 91 915 955 957 
without, 225 448 
world, 570 580 
worst, 284 
write, 490 
x, 119 121 171 172 178 183 190 192 398 400 415 425 427 585 586 606 610 644 648 720 726 775 940 990 
x), 117 119 121 175 182 189 345 346 347 397 414 424 
x);, 170 171 172 382 383 384 
x);}, 118 120 122 345 346 347 650 728 
x)@, 327 332 
x,, 643 647 715 719 724 
x;, 185 418 984 985 991 
x;}, 941 
y, 302 644 649 720 727 776 
y);, 647 724 
y,, 643 650 715 719 728 
yard, 760 763 
years, 670 
yet, 828 
you, 236 
your, 234 453 
z, 645 721 
z), 643 719 
z);, 715 
z,, 647 650 724 728 
zero, 140 
{, 109 164 176 341 352 378 389 515 527 53 530 537 646 664 713 723 931 932 936 990 
{//Move, 644 720 
{//add, 183 415 
{//delete, 190 425 
{//k, 924 
{//move, 939 983 
{//preprocessor, 732 
{//set, 398 
{0, 664 
{2moves(n-1)~+~1}}, 664 
{delete, 355 392 
{i->data, 418 
{if, 533 
{n=0, 664 
{return, 114 116 118 120 122 168 169 343 345 346 347 380 
{}, 113 167 
||, 737 
}, 180 187 194 357 394 402 421 432 524 536 541 651 729 742 81 942 944 992 
};, 123 173 348 385 717 
~-~1@., 667 
~~lpile, 664 
~~~lpile, 664 
